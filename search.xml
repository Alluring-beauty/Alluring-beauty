<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于学习go语言的一些记录.md</title>
      <link href="/2023/09/24/%E5%85%B3%E4%BA%8E%E5%AD%A6%E4%B9%A0go%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/09/24/%E5%85%B3%E4%BA%8E%E5%AD%A6%E4%B9%A0go%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="关于学习Go语言的一些记录"><a href="#关于学习Go语言的一些记录" class="headerlink" title="关于学习Go语言的一些记录"></a>关于学习Go语言的一些记录</h3><p>最近秋招来临，心血来潮的我走进了秋招的会场，拿着劣质的简历面试了几场C&#x2F;C++的后台开发工程师的岗位。其中我有问到公司内部后台开发用什么语言较多，技术经理回答说C&#x2F;C++,Java,Python基本都有，但是现在正在向Go转型，以后呢也基本会转型使用Go语言。面试结束回来之后，我才开始了解Go语言的起源和发展，并对于这个“后起之秀”产生了浓厚的兴趣。</p><p>工欲善其事必先利其器，学习Go语言要先搭建编译环境，这里我选择了<code>WSL+Ubuntu20.04+VSCode</code>平台来搭建编译环境。但是过程中遇到了一些“坑”，因此写一篇博客来记录一下。</p><p>首先就是Ubuntu自带的软件源不能够提供最新版本的Go源代码，这就导致在运行VSCode的时候，会出现一些工具包下载失败的情况，报错信息提示要求Go的版本号在1.14以上。在此我强烈建议在<a href="https://go.dev/">官网下载</a>最新版本的源代码。</p><p>下载完成之后，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxf go1.21.1.linux-amd64.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure><p>将压缩包解压至&#x2F;usr&#x2F;local&#x2F;目录下，<code>cd /usr/local/</code>切换至&#x2F;usr&#x2F;local&#x2F;目录下可以看到多出来了一个go目录。此时命令行输入<code>go version</code>会提示找不到命令，说明这时候我们的环境变量和用户变量还没有设置好，打开命令行，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.bashrc <span class="comment"># 需要按下i进入插入模式，滑到最后一行</span></span><br><span class="line"><span class="built_in">export</span> GOROOT=/usr/local/go</span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/go</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin:<span class="variable">$GOPATH</span>/bin <span class="comment"># 按esc之后在键盘输入:wq三个字符</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>执行完成之后，我们再次在命令行中执行<code>go version</code>将会出现类似于<code>go version go1.21.1 linux/amd64</code>的版本号，说明我们的环境变量设置成功。</p><blockquote><p>最值得注意的一点，坑了我好久，问了很多次ChatGPT都没能够解决！！！</p></blockquote><p>在命令行中执行<code>go env</code>我们会看到很多行版本信息，我们只需要关注第一行的<code>GO1111MODULE=&quot;&quot;</code>引号中的字符串，建议初学者改成<code>off</code>，只需要在命令行中执行：<code>go env -w GO111MODULE=off</code>，方便后续使用<code>VScode</code>实现本地的包引用(因为可能<code>go modules</code>对新手不是很友好，所以就暂时先关闭这一选项，这也是我踩的一个大坑！否则就会疯狂报类似的错误)。</p><p><img src="/img/cover/image-20230924053233415.png" alt="image-20230924053233415"></p><blockquote><p>OK，至此我们已经完成了Go语言环境的配置，剩下的就是使用VSCode构建一个简单的项目了！</p></blockquote><ul><li><p>打开VSCode搜索并下载go插件，由Go Team at Google开发</p></li><li><p>打开命令行，如果在~&#x2F;目录下执行<code>mkdir -r go/src/goProject   </code>创建go文件夹，并在go文件夹下创建src子文件夹，并在src文件夹下创建goProject文件夹用于存放项目源码。</p></li><li><p>用VSCode打开goProject文件夹，创建myLib文件夹和main.go源代码，并在myLib文件夹中创建hello.go源代码，分别写入以下内容：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># main.<span class="keyword">go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">mylib <span class="string">&quot;goProject/myLib&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">mylib.HelloPrint()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># hello.<span class="keyword">go</span></span><br><span class="line"><span class="keyword">package</span> mylib</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloPrint</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Hello Go Language:)&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在VSCode中新建终端，执行：<code>go run main.go</code>即可在终端中看到输出信息<code>Hello Go Language:)</code></p><p><img src="/img/cover/image-20230924052903282.png" alt="image-20230924052850525"></p></li><li><p>至此，Go语言环境和VSCode编辑环境都已经配置完成！完结撒花~</p><blockquote><p>【注】如果执行不成功，打开VSCode的设置，搜索Go:GOPATH，勾选以下选项即可！</p><p><img src="/img/cover/image-20230924052507335.png" alt="image-20230924052507335"></p></blockquote></li></ul><p>本人配置过程参考B站视频：<a href="https://www.bilibili.com/video/BV1gf4y1r79E?p=2&vd_source=f1043071fb4d917cdebd07a0959a1f47">2-Golang开发环境重点和IDE选型推荐_哔哩哔哩_bilibili</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>克里金插值算法</title>
      <link href="/2023/07/25/%E5%85%8B%E9%87%8C%E9%87%91%E6%8F%92%E5%80%BC%E7%AE%97%E6%B3%95/"/>
      <url>/2023/07/25/%E5%85%8B%E9%87%8C%E9%87%91%E6%8F%92%E5%80%BC%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p style="text-indent:2em;">克里金插值算法是一个典型的空间插值算法，常用于工程方面的计算和预测问题。</p><p>​在一个契机之下，我加入了韩老师的项目组，在老师的带领下，从零开始学习普通克里金插值算法的工作机理、使用范围以及实现过程。下面简单记录一下心得吧～嘻嘻</p><p>​实现过程中，最具有挑战性的就是如何针对于距离-半差方二维数据点的高斯曲线拟合，最终在和老师的探讨之下最终采用Levenberg-Marquardt（列文伯格-马夸尔特）算法来实现最优化的非线性曲线拟合，实现方法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;eigen3/Eigen/Core&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;eigen3/Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;eigen3/Eigen/Cholesky&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;InitArrPointer.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    LevenbergMarquardt具体实现优化方程类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LevenbergMarquardt</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">LevenbergMarquardt</span>(<span class="type">double</span> *a, <span class="type">double</span> *b, <span class="type">double</span> *c) : <span class="built_in">a_</span>(a), <span class="built_in">b_</span>(b), <span class="built_in">c_</span>(c)</span><br><span class="line">    &#123;</span><br><span class="line">        epsilon_1_ = <span class="number">1e-6</span>;</span><br><span class="line">        epsilon_2_ = <span class="number">1e-6</span>;</span><br><span class="line">        max_iter_ = <span class="number">50</span>;</span><br><span class="line">        is_out_ = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置参数函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setParameters</span><span class="params">(<span class="type">double</span> epsilon_1, <span class="type">double</span> epsilon_2, <span class="type">int</span> max_iter, <span class="type">bool</span> is_out)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        epsilon_1_ = epsilon_1;</span><br><span class="line">        epsilon_2_ = epsilon_2;</span><br><span class="line">        max_iter_ = max_iter;</span><br><span class="line">        is_out_ = is_out;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将数据添加入观测值中</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addObservation</span><span class="params">(<span class="type">const</span> <span class="type">double</span> &amp;x, <span class="type">const</span> <span class="type">double</span> &amp;y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        obs_.<span class="built_in">push_back</span>(Eigen::<span class="built_in">Vector2d</span>(x, y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算要优化曲线方程的雅可比矩阵</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">calcJ_fx</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        J_.<span class="built_in">resize</span>(obs_.<span class="built_in">size</span>(), <span class="number">3</span>);</span><br><span class="line">        fx_.<span class="built_in">resize</span>(obs_.<span class="built_in">size</span>(), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; obs_.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> Eigen::Vector2d &amp;ob = obs_.<span class="built_in">at</span>(i);</span><br><span class="line">            <span class="type">const</span> <span class="type">double</span> &amp;x = <span class="built_in">ob</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="type">const</span> <span class="type">double</span> &amp;y = <span class="built_in">ob</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="type">double</span> j1 = <span class="number">-1</span>;</span><br><span class="line">            <span class="type">double</span> j2 = <span class="built_in">exp</span>(<span class="number">-1</span> * x * x / (*c_ * *c_)) - <span class="number">1</span>;</span><br><span class="line">            <span class="type">double</span> j3 = <span class="number">2</span> * *b_ * x * x / (*c_ * *c_ * *c_) * <span class="built_in">exp</span>(<span class="number">-1</span> * x * x / (*c_ * *c_));</span><br><span class="line">            <span class="built_in">J_</span>(i, <span class="number">0</span>) = j1;</span><br><span class="line">            <span class="built_in">J_</span>(i, <span class="number">1</span>) = j2;</span><br><span class="line">            <span class="built_in">J_</span>(i, <span class="number">2</span>) = j3;</span><br><span class="line">            <span class="built_in">fx_</span>(i, <span class="number">0</span>) = y - (*a_ + *b_ * (<span class="number">1</span> - <span class="built_in">exp</span>(<span class="number">-1</span> * x * x / (*c_ * *c_))));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算黑塞矩阵</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">calcH_g</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        H_ = J_.<span class="built_in">transpose</span>() * J_;</span><br><span class="line">        g_ = -J_.<span class="built_in">transpose</span>() * fx_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getCost</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Eigen::MatrixXd cost = fx_.<span class="built_in">transpose</span>() * fx_;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cost</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">F</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b, <span class="type">double</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Eigen::MatrixXd fx;</span><br><span class="line">        fx.<span class="built_in">resize</span>(obs_.<span class="built_in">size</span>(), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; obs_.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> Eigen::Vector2d &amp;ob = obs_.<span class="built_in">at</span>(i);</span><br><span class="line">            <span class="type">const</span> <span class="type">double</span> &amp;x = <span class="built_in">ob</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="type">const</span> <span class="type">double</span> &amp;y = <span class="built_in">ob</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// change</span></span><br><span class="line">            <span class="comment">// fx(i, 0) = y - exp(a * x * x + b * x + c);</span></span><br><span class="line">            <span class="built_in">fx</span>(i, <span class="number">0</span>) = y - (a + b * (<span class="number">1</span> - <span class="built_in">exp</span>(<span class="number">-1</span> * x * x / c / c)));</span><br><span class="line">        &#125;</span><br><span class="line">        Eigen::MatrixXd F = <span class="number">0.5</span> * fx.<span class="built_in">transpose</span>() * fx;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">F</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">L0_L</span><span class="params">(Eigen::Vector3d &amp;h)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Eigen::MatrixXd L = -h.<span class="built_in">transpose</span>() * J_.<span class="built_in">transpose</span>() * fx_ - <span class="number">0.5</span> * h.<span class="built_in">transpose</span>() * J_.<span class="built_in">transpose</span>() * J_ * h;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">L</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 迭代优化过程</span></span><br><span class="line">    <span class="function"><span class="type">double</span> **<span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> nu = <span class="number">2.0</span>;</span><br><span class="line">        <span class="built_in">calcJ_fx</span>();</span><br><span class="line">        <span class="built_in">calcH_g</span>();</span><br><span class="line">        <span class="type">bool</span> found = (g_.<span class="built_in">lpNorm</span>&lt;Eigen::Infinity&gt;() &lt; epsilon_1_);</span><br><span class="line"></span><br><span class="line">        std::vector&lt;<span class="type">double</span>&gt; A;</span><br><span class="line">        A.<span class="built_in">push_back</span>(<span class="built_in">H_</span>(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        A.<span class="built_in">push_back</span>(<span class="built_in">H_</span>(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">        A.<span class="built_in">push_back</span>(<span class="built_in">H_</span>(<span class="number">2</span>, <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">auto</span> max_p = std::<span class="built_in">max_element</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">double</span> mu = *max_p;</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> sumt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!found &amp;&amp; k &lt; max_iter_)</span><br><span class="line">        &#123;</span><br><span class="line">            k = k + <span class="number">1</span>;</span><br><span class="line">            Eigen::Matrix3d G = H_ + mu * Eigen::Matrix3d::<span class="built_in">Identity</span>();</span><br><span class="line">            Eigen::Vector3d h = G.<span class="built_in">ldlt</span>().<span class="built_in">solve</span>(g_);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (h.<span class="built_in">norm</span>() &lt;= epsilon_2_ * (<span class="built_in">sqrt</span>(*a_ * *a_ + *b_ * *b_ + *c_ * *c_) + epsilon_2_))</span><br><span class="line">                found = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">double</span> na = *a_ + <span class="built_in">h</span>(<span class="number">0</span>);</span><br><span class="line">                <span class="type">double</span> nb = *b_ + <span class="built_in">h</span>(<span class="number">1</span>);</span><br><span class="line">                <span class="type">double</span> nc = *c_ + <span class="built_in">h</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">                <span class="type">double</span> rho = (<span class="built_in">F</span>(*a_, *b_, *c_) - <span class="built_in">F</span>(na, nb, nc)) / <span class="built_in">L0_L</span>(h);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (rho &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    *a_ = na;</span><br><span class="line">                    *b_ = nb;</span><br><span class="line">                    *c_ = nc;</span><br><span class="line">                    <span class="built_in">calcJ_fx</span>();</span><br><span class="line">                    <span class="built_in">calcH_g</span>();</span><br><span class="line"></span><br><span class="line">                    found = (g_.<span class="built_in">lpNorm</span>&lt;Eigen::Infinity&gt;() &lt; epsilon_1_);</span><br><span class="line">                    mu = mu * std::<span class="built_in">max</span>&lt;<span class="type">double</span>&gt;(<span class="number">0.33</span>, <span class="number">1</span> - std::<span class="built_in">pow</span>(<span class="number">2</span> * rho - <span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line">                    nu = <span class="number">2.0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    mu = mu * nu;</span><br><span class="line">                    nu = <span class="number">2</span> * nu;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (is_out_)</span><br><span class="line">            &#123;</span><br><span class="line">                result[<span class="number">0</span>][<span class="number">0</span>] = *a_;</span><br><span class="line">                result[<span class="number">1</span>][<span class="number">0</span>] = *b_;</span><br><span class="line">                result[<span class="number">2</span>][<span class="number">0</span>] = *c_;</span><br><span class="line">                std::cout &lt;&lt; <span class="string">&quot;Iter: &quot;</span> &lt;&lt; std::left &lt;&lt; k &lt;&lt; <span class="string">&quot; Result: &quot;</span></span><br><span class="line">                          &lt;&lt; std::left &lt;&lt; *a_ &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; std::left &lt;&lt; *b_ &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; std::left</span><br><span class="line">                          &lt;&lt; *c_ &lt;&lt; <span class="string">&quot; step: &quot;</span> &lt;&lt; std::left &lt;&lt; h.<span class="built_in">norm</span>() &lt;&lt; <span class="string">&quot; cost: &quot;</span> &lt;&lt; std::left</span><br><span class="line">                          &lt;&lt; <span class="built_in">getCost</span>() &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (found == <span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;\nFinished!\n\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            result[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            result[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            result[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;\nDiverged\n\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Eigen::MatrixXd fx_;</span><br><span class="line">    Eigen::MatrixXd J_; <span class="comment">// 雅克比矩阵</span></span><br><span class="line">    Eigen::Matrix3d H_; <span class="comment">// H矩阵</span></span><br><span class="line">    Eigen::Vector3d g_;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;Eigen::Vector2d&gt; obs_; <span class="comment">// 观测</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 要求的三个参数 */</span></span><br><span class="line">    <span class="type">double</span> *a_, *b_, *c_;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* parameters */</span></span><br><span class="line">    <span class="type">double</span> epsilon_1_, epsilon_2_;</span><br><span class="line">    <span class="type">int</span> max_iter_;</span><br><span class="line">    <span class="type">bool</span> is_out_;</span><br><span class="line">    <span class="type">double</span> **result = <span class="built_in">InitArrPointer</span>(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">&#125;; <span class="comment">// class LevenbergMarquardt</span></span><br></pre></td></tr></table></figure><p>​在以上的求解过程中，根据需要拟合的曲线方程的不同，需要手动计算出曲线方程的雅可比矩阵以及黑塞矩阵，然后再带入方程继续求解，很不方便，但是由于精力有限而且本项目只用到了一种曲线拟合，因此就没有进一步优化，以后有机会的话会尝试着做一个适配型的拟合算法～</p><p>​最关键的一步解决了之后，就是按部就班的按照普通克里金的算法流程具体实现啦～（完整代码上传至<a href="https://github.com/Alluring-beauty/Kriging_project">GitHub</a>）。</p><p>​最后，这个项目最终和公司完成了对接，最后的效果也得到了公司的好评，这几个月里也学到了许多课程之外的知识，同时也锻炼了自己的代码能力，培养了遇到问题先量力而行自己解决，再和老师&#x2F;同学共同探讨的学习习惯，总体来说受益匪浅，对以后的提升也有一定的帮助！</p>]]></content>
      
      
      <categories>
          
          <category> Kriging Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数值分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>夜半序</title>
      <link href="/2023/03/15/%E5%A4%9C%E5%8D%8A%E5%BA%8F/"/>
      <url>/2023/03/15/%E5%A4%9C%E5%8D%8A%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p style="text-indent:2em">知我思之无数，知我念之无穷。<span style="color:red">人隔两地，可共月而同情，虽远千里，愿地分而人和。</span>比肩并坐，促膝同赏。月明群星，星点晴月。霓虹朦胧，天地相削。天跨浩海，日落长江。风过林梢，水击磐石。秋霜附于红叶，红叶舞随秋风。初叶不托朝露，新花不惹蜂虫。危楼与远天齐高，余霞携落日同晖。</p><p style="text-indent:2em">日之所思，爱于夜梦之中，心之所念，匿于蹙眉之间。忧思无时，吾精沛之有时。琐事不数，吾力及之有数。不周之处，冀望侬可相谅；不足之处，孚信吾可相移。执子之手，共步高堂之殿，与子偕老，共度余生之年。</p><p style="text-indent:2em">航，二十有一，所知甚微。<b style="color:red">无志沉舟，梦紫荆之待放；有意摘星，顾皓月之柔光。</b>输画眉于张敞，逊偷香于韩寿。无相如之宝玉，失沈约之瘦腰。他日有意，此序得全；不测风云，无心多言。满目柔情，尽是他人不解；举身无知，疑非不合时宜？</p>]]></content>
      
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些事情的感悟</title>
      <link href="/2022/07/25/%E5%85%B3%E4%BA%8E%E5%87%86%E5%A4%87%E8%80%83%E7%A0%94%E6%9C%89%E6%84%9F/"/>
      <url>/2022/07/25/%E5%85%B3%E4%BA%8E%E5%87%86%E5%A4%87%E8%80%83%E7%A0%94%E6%9C%89%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="da2953b5f37bf4388d1f7955590089aabbc17c872c87d53468b1be33e7f40a83">c75da5e4fbcd6b3f98a9f97f1281dc13eb3fa70e3b4e58f5270f9c3d6e1bcb8363a4740da6d4c14e137aeb8311dc5dd84b063aea95b126850267a32487d97a8c9f6e7fcb46de74e1fbeca50df7c15ccb5b4d5d6d7388f869357018469b9d0bc552fb37f190771c4b341191ee689a84aa129f011f6e5f403b8de451006d94c73339afa64f67b4a341191efc6b5564607a470784240b73c14e96918ae1a0f1df8fa6408be86f260a46037c2b52d65e9904f97b0a5ba8e4237c1f6e810a27f265c24a99af274f6ba2b5e0d4092e0a19ca5bff4a3e21fdb49e821b537e825651864ac8ae7f432d247b47c5f5357eef671caf19f6949a1111c7a067442366f6cb830c9aaf305a8014aa3ec6535682622da2ff44a3b22f2148c1bb82fd4d7cb353b32b18d3da12f12c3ea86f4121493da86bd4faadb803df01c802f88277795fcacfc0e85ac48d3ea1e80ac819fbc3c5fc5bf2f668076f6213733f97aaff4839ac56d3485d2d67428b0aceb00b64596efa65e3f43916718982b5988b9da6ff91fcac8f31bbec99916241cb7e62eb4d965c4863b06382c09f3ae45fa9c570db36e50971a3db58be354a7b1d08c93bb1026c6f068758c82df0618422280a6e0bb105264d2bc40940304a57961fd6673fa7f54bab96adb447d372475d5fe7713ac992a2e5e292219e80dc612407ebcf1fc2891ec44542a74b2642280177cc0b0967646f1ac116e8c7b1b4b79b671096346d47ff099391ccdbd8f63e490fdd1dae278e433ab2f8a79cdbf74bbef7b7470f11daa54a55d24cae0fae98142c2b10a6db906c8a531e1fc451daad2ce1aafa5fb2c6c2bee2adeac07991201fbdc2c1e4e888697af701f37f0b6b4401259d1107c3444e958119d1cc22da2a9040aaae9beee62de1eaa46c53c8559857ad392c6700384594395c4d322449aced1508adabb34b0f239b9b93d36b363d6c37b268f0eba86092026708f74277acf04fb7e9f83190f233d2016e636d8fb2944b89762e7f8b73c1a1b7d26bc712d2505340f4b8ca592499f46e4cd49306be95ef5d775747d44b188d093f9cc72558920329fbee49c2d02c4c875ba35ea2718264980d9e5c13b0dddd13bf18d4667b86b75013ad4b41ccc9544eda6ad5b7af96eae7b625d5b14c14a39c8fc4984377902eb6afd0ab8e0cf85f7de2ee34483ce966a0477b30dab8747986a9b27156fa8952294bbcf6791c64b17d13e94d878446fb2ebc8022410698534f5e114d1d34bf628c3ccfbc235fa8501d8c57403495432851be1a142916dee99c56c12247dae9a70fc3e40690cb9a44ca4fb04e214a83a732e58b0132f80293f5247edec92de822efacdce0dcd938b4ca402b6b90862d0abd25890012649d1c25b5dba5bb1cf5c650614e0ea2ffc1171f18bb302915a24c357211d61f88657bd06d177605774011324fddb82665710efef42cad373493e1f22d6f2e926d95b2993675f54a3378f94cdcac5a582d46fbfdf4dfa5628a2fb658e0b5acad6ed8587603f6960fef8be23a447eb0df4e4828155bc3c5faf0a29215f9291f786ded120e0507d5ed202a3eb4d4cd0e3e265cbe96457715c3e32846518861cecc93fe7f6c4f38096c68adda5b1f7a2e13019ad47d6ea71e048baffa380a7354940716d92ff253bd9f4c3ceac6764370ee9eaa82c9f5a40f58bbc46e5c6b283412504ccbf7f4f1f4e33985a6161f0f70558d76a85bf9eded2309025925304124453ddcd63bacaa14d668d9bdce02d2ff96e77efdf88ff5926fb6676d45f0abaa77321a7060c584603a02a65946dc83815ba14eb6fd37dd5b8c4fac4d4831d655d27332fed841caea4ad42d1736b806ee6718b981bfce223b9249313e7373f0ade292562c8d8f3177ed419c584b169f3dfee819516f9c19106b9a1f8724809ae1dc9103cc359be3ea59d9debd94095427168a7f35c76885298eee9446019e311211fd75b0b611626a853112a58c17cea17d0fd9017ed0be1484c552bdd4a054acef9c4e9136e34f4d3f8b8612c0f984b2e2131f9d752c30b90f767554c8d070bfe9b2438bac2f62b67fd690bec86876cb6599b54aa2b23870e989ac77d9e6d7e52f641c5bd60857ad2f49dd988b7f394ddf28b7cf634c6b13812fd439233c8072831c2f8b501d6fe69e4d652cde16d8733caa759f6c3c3099d346d76ab6705409ad71cb0ed13bd8b7705968c59dccb3fb65bc746fc51605e3334fa075ac7fb79f5f67dbd488a45a3887f6b5b56fdacf5a130eb4c0cca5df288c12b3861d62bb6720fa7d8f207475a0eace5fb178e2870478d482900c6f2cf09e35a4ff5a1ceafabb088aacc1026acdbd93b6d498ee8e93706afedfec5735c55fc72a40dc49e6ae67a894582cc685c3ac539edee1ce7e85e85d49fa3d17844996b2351bcaed6deb74a4a83c732a46beb1c921cd3125a25810fb8ba5506295db9282a7519c5d774031e1d4ed63b7eac67d629566fec73e59090a3f58dce85152b8a20bc1a0e36600feccdd4374eca987f6756f3a5c4b917db72748060b6fe5919f24e5814513efa1fc5c16d4f1c6524a5ec4116fc4398ad10ee57a34364043bda4b2c219860cc986e32b4d8c7d1279080448843f4f8b59dacefe1bf66bb19eb1e5f8fe3dd29045ee7ec8131526a37a4b65917fd92e5b150f7c94427060d3285e1c47ea3cecb9c90e58d79540ed7424948367c758a854e3ae8334e3a409b9869e7a325beb9d151bb571785d79b6802713c8f256d22fc17ddadb86c5622a531f62ea588f2951a9ee2ebb7595ad231ef378f5c09debcd3cd95e1ace5f7769b077a33412a694377d7f00e6f1fe59cd726574334b42e18aab740824e47b2cb46898ab492c0858e9c3fb00c3109d75e90dea6d9dbe70debc20ad4cdfbf3d1684db3899386f9b770205fbb76a78aac6d5e92dd535ed513593089f25f370296318c0358ad817af3474bd379b19436cb4ecf511d8b1eed45b2f5a01ca7cd99ce4667ff728ea180a50c624c754a91acac387aac9a86be8b68bf3dff780ba2091dffa98a27b3a5847a4c00921bb675ca5842a37d8d891e7156a12ec15ce1b8ea9962891fc0b9091ef68e75953f274992d37f32f4f5c64a22f5a4b49a4ac8751568e188c9b166cfa8e4bf5df45a9b7203200c8b7ca630aea63f53a034af3e883bd13490bbbd9e389070e42135271fe15da4406e553d95defcc6031c6221b098f97fdd98de041421c63d48e7d8daa56a1eeaa22da5f6e6535a2fb5eea3d5d49e2bfa15e1e3a79361452f9fb372b41189bb6991ecc90db20238f6c4f6956a86d4e0b437ed463cef0ad4c6e405235a470d8c59542b066d4060ddd6324aa74e72afb655fb108f5d99dbb21f8f8e2afd71efda5e34ab2fc407d45f69d39dbbff9fdb88f92783472f4cde98255984e07d1c08e5a3df3e364ba251f0a63b93b2bf203de0ee370cb0379c8b1831d273652f9b23aac11ec49614dbfa1100a1c556f753dc5abab879de4c59762d4630afbc63ca0c4d4ca0eb475ca51dd22a091dedec140551e0833e3a880cd50c2dd5fdef557fc8d57763b4228e35553e6ecc941abf54941b7581d34f190f8aac5e67b0a4d1fb445b467f8dc336c3b20992fd003d3412c2cf0a1c73689bab3883f154c107d99fecdd4732906ce4a9ebbbe703e188432acbc0b170aae4177ff4aa6cba0c223d0f4e613</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
