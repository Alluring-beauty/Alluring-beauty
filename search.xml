<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于学习go语言的一些记录.md</title>
      <link href="/2023/09/24/%E5%85%B3%E4%BA%8E%E5%AD%A6%E4%B9%A0go%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/09/24/%E5%85%B3%E4%BA%8E%E5%AD%A6%E4%B9%A0go%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="关于学习Go语言的一些记录"><a href="#关于学习Go语言的一些记录" class="headerlink" title="关于学习Go语言的一些记录"></a>关于学习Go语言的一些记录</h3><p>最近秋招来临，心血来潮的我走进了秋招的会场，拿着劣质的简历面试了几场C&#x2F;C++的后台开发工程师的岗位。其中我有问到公司内部后台开发用什么语言较多，技术经理回答说C&#x2F;C++,Java,Python基本都有，但是现在正在向Go转型，以后呢也基本会转型使用Go语言。面试结束回来之后，我才开始了解Go语言的起源和发展，并对于这个“后起之秀”产生了浓厚的兴趣。</p><p>工欲善其事必先利其器，学习Go语言要先搭建编译环境，这里我选择了<code>WSL+Ubuntu20.04+VSCode</code>平台来搭建编译环境。但是过程中遇到了一些“坑”，因此写一篇博客来记录一下。</p><p>首先就是Ubuntu自带的软件源不能够提供最新版本的Go源代码，这就导致在运行VSCode的时候，会出现一些工具包下载失败的情况，报错信息提示要求Go的版本号在1.14以上。在此我强烈建议在<a href="https://go.dev/">官网下载</a>最新版本的源代码。</p><p>下载完成之后，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxf go1.21.1.linux-amd64.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure><p>将压缩包解压至&#x2F;usr&#x2F;local&#x2F;目录下，<code>cd /usr/local/</code>切换至&#x2F;usr&#x2F;local&#x2F;目录下可以看到多出来了一个go目录。此时命令行输入<code>go version</code>会提示找不到命令，说明这时候我们的环境变量和用户变量还没有设置好，打开命令行，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.bashrc <span class="comment"># 需要按下i进入插入模式，滑到最后一行</span></span><br><span class="line"><span class="built_in">export</span> GOROOT=/usr/local/go</span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/go</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin:<span class="variable">$GOPATH</span>/bin <span class="comment"># 按esc之后在键盘输入:wq三个字符</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>执行完成之后，我们再次在命令行中执行<code>go version</code>将会出现类似于<code>go version go1.21.1 linux/amd64</code>的版本号，说明我们的环境变量设置成功。</p><blockquote><p>最值得注意的一点，坑了我好久，问了很多次ChatGPT都没能够解决！！！</p></blockquote><p>在命令行中执行<code>go env</code>我们会看到很多行版本信息，我们只需要关注第一行的<code>GO1111MODULE=&quot;&quot;</code>引号中的字符串，建议初学者改成<code>off</code>，只需要在命令行中执行：<code>go env -w GO111MODULE=off</code>，方便后续使用<code>VScode</code>实现本地的包引用(因为可能<code>go modules</code>对新手不是很友好，所以就暂时先关闭这一选项，这也是我踩的一个大坑！否则就会疯狂报类似的错误)。</p><p><img src="/img/cover/image-20230924053233415.png" alt="image-20230924053233415"></p><blockquote><p>OK，至此我们已经完成了Go语言环境的配置，剩下的就是使用VSCode构建一个简单的项目了！</p></blockquote><ul><li><p>打开VSCode搜索并下载go插件，由Go Team at Google开发</p></li><li><p>打开命令行，如果在~&#x2F;目录下执行<code>mkdir -r go/src/goProject   </code>创建go文件夹，并在go文件夹下创建src子文件夹，并在src文件夹下创建goProject文件夹用于存放项目源码。</p></li><li><p>用VSCode打开goProject文件夹，创建myLib文件夹和main.go源代码，并在myLib文件夹中创建hello.go源代码，分别写入以下内容：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># main.<span class="keyword">go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">mylib <span class="string">&quot;goProject/myLib&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">mylib.HelloPrint()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># hello.<span class="keyword">go</span></span><br><span class="line"><span class="keyword">package</span> mylib</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloPrint</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Hello Go Language:)&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在VSCode中新建终端，执行：<code>go run main.go</code>即可在终端中看到输出信息<code>Hello Go Language:)</code></p><p><img src="/img/cover/image-20230924052903282.png" alt="image-20230924052850525"></p></li><li><p>至此，Go语言环境和VSCode编辑环境都已经配置完成！完结撒花~</p><blockquote><p>【注】如果执行不成功，打开VSCode的设置，搜索Go:GOPATH，勾选以下选项即可！</p><p><img src="/img/cover/image-20230924052507335.png" alt="image-20230924052507335"></p></blockquote></li></ul><p>本人配置过程参考B站视频：<a href="https://www.bilibili.com/video/BV1gf4y1r79E?p=2&vd_source=f1043071fb4d917cdebd07a0959a1f47">2-Golang开发环境重点和IDE选型推荐_哔哩哔哩_bilibili</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>克里金插值算法</title>
      <link href="/2023/07/25/%E5%85%8B%E9%87%8C%E9%87%91%E6%8F%92%E5%80%BC%E7%AE%97%E6%B3%95/"/>
      <url>/2023/07/25/%E5%85%8B%E9%87%8C%E9%87%91%E6%8F%92%E5%80%BC%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p style="text-indent:2em;">克里金插值算法是一个典型的空间插值算法，常用于工程方面的计算和预测问题。</p><p>​在一个契机之下，我加入了韩老师的项目组，在老师的带领下，从零开始学习普通克里金插值算法的工作机理、使用范围以及实现过程。下面简单记录一下心得吧～嘻嘻</p><p>​实现过程中，最具有挑战性的就是如何针对于距离-半差方二维数据点的高斯曲线拟合，最终在和老师的探讨之下最终采用Levenberg-Marquardt（列文伯格-马夸尔特）算法来实现最优化的非线性曲线拟合，实现方法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;eigen3/Eigen/Core&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;eigen3/Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;eigen3/Eigen/Cholesky&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;InitArrPointer.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    LevenbergMarquardt具体实现优化方程类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LevenbergMarquardt</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">LevenbergMarquardt</span>(<span class="type">double</span> *a, <span class="type">double</span> *b, <span class="type">double</span> *c) : <span class="built_in">a_</span>(a), <span class="built_in">b_</span>(b), <span class="built_in">c_</span>(c)</span><br><span class="line">    &#123;</span><br><span class="line">        epsilon_1_ = <span class="number">1e-6</span>;</span><br><span class="line">        epsilon_2_ = <span class="number">1e-6</span>;</span><br><span class="line">        max_iter_ = <span class="number">50</span>;</span><br><span class="line">        is_out_ = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置参数函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setParameters</span><span class="params">(<span class="type">double</span> epsilon_1, <span class="type">double</span> epsilon_2, <span class="type">int</span> max_iter, <span class="type">bool</span> is_out)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        epsilon_1_ = epsilon_1;</span><br><span class="line">        epsilon_2_ = epsilon_2;</span><br><span class="line">        max_iter_ = max_iter;</span><br><span class="line">        is_out_ = is_out;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将数据添加入观测值中</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addObservation</span><span class="params">(<span class="type">const</span> <span class="type">double</span> &amp;x, <span class="type">const</span> <span class="type">double</span> &amp;y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        obs_.<span class="built_in">push_back</span>(Eigen::<span class="built_in">Vector2d</span>(x, y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算要优化曲线方程的雅可比矩阵</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">calcJ_fx</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        J_.<span class="built_in">resize</span>(obs_.<span class="built_in">size</span>(), <span class="number">3</span>);</span><br><span class="line">        fx_.<span class="built_in">resize</span>(obs_.<span class="built_in">size</span>(), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; obs_.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> Eigen::Vector2d &amp;ob = obs_.<span class="built_in">at</span>(i);</span><br><span class="line">            <span class="type">const</span> <span class="type">double</span> &amp;x = <span class="built_in">ob</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="type">const</span> <span class="type">double</span> &amp;y = <span class="built_in">ob</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="type">double</span> j1 = <span class="number">-1</span>;</span><br><span class="line">            <span class="type">double</span> j2 = <span class="built_in">exp</span>(<span class="number">-1</span> * x * x / (*c_ * *c_)) - <span class="number">1</span>;</span><br><span class="line">            <span class="type">double</span> j3 = <span class="number">2</span> * *b_ * x * x / (*c_ * *c_ * *c_) * <span class="built_in">exp</span>(<span class="number">-1</span> * x * x / (*c_ * *c_));</span><br><span class="line">            <span class="built_in">J_</span>(i, <span class="number">0</span>) = j1;</span><br><span class="line">            <span class="built_in">J_</span>(i, <span class="number">1</span>) = j2;</span><br><span class="line">            <span class="built_in">J_</span>(i, <span class="number">2</span>) = j3;</span><br><span class="line">            <span class="built_in">fx_</span>(i, <span class="number">0</span>) = y - (*a_ + *b_ * (<span class="number">1</span> - <span class="built_in">exp</span>(<span class="number">-1</span> * x * x / (*c_ * *c_))));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算黑塞矩阵</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">calcH_g</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        H_ = J_.<span class="built_in">transpose</span>() * J_;</span><br><span class="line">        g_ = -J_.<span class="built_in">transpose</span>() * fx_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getCost</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Eigen::MatrixXd cost = fx_.<span class="built_in">transpose</span>() * fx_;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cost</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">F</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b, <span class="type">double</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Eigen::MatrixXd fx;</span><br><span class="line">        fx.<span class="built_in">resize</span>(obs_.<span class="built_in">size</span>(), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; obs_.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> Eigen::Vector2d &amp;ob = obs_.<span class="built_in">at</span>(i);</span><br><span class="line">            <span class="type">const</span> <span class="type">double</span> &amp;x = <span class="built_in">ob</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="type">const</span> <span class="type">double</span> &amp;y = <span class="built_in">ob</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// change</span></span><br><span class="line">            <span class="comment">// fx(i, 0) = y - exp(a * x * x + b * x + c);</span></span><br><span class="line">            <span class="built_in">fx</span>(i, <span class="number">0</span>) = y - (a + b * (<span class="number">1</span> - <span class="built_in">exp</span>(<span class="number">-1</span> * x * x / c / c)));</span><br><span class="line">        &#125;</span><br><span class="line">        Eigen::MatrixXd F = <span class="number">0.5</span> * fx.<span class="built_in">transpose</span>() * fx;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">F</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">L0_L</span><span class="params">(Eigen::Vector3d &amp;h)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Eigen::MatrixXd L = -h.<span class="built_in">transpose</span>() * J_.<span class="built_in">transpose</span>() * fx_ - <span class="number">0.5</span> * h.<span class="built_in">transpose</span>() * J_.<span class="built_in">transpose</span>() * J_ * h;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">L</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 迭代优化过程</span></span><br><span class="line">    <span class="function"><span class="type">double</span> **<span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> nu = <span class="number">2.0</span>;</span><br><span class="line">        <span class="built_in">calcJ_fx</span>();</span><br><span class="line">        <span class="built_in">calcH_g</span>();</span><br><span class="line">        <span class="type">bool</span> found = (g_.<span class="built_in">lpNorm</span>&lt;Eigen::Infinity&gt;() &lt; epsilon_1_);</span><br><span class="line"></span><br><span class="line">        std::vector&lt;<span class="type">double</span>&gt; A;</span><br><span class="line">        A.<span class="built_in">push_back</span>(<span class="built_in">H_</span>(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        A.<span class="built_in">push_back</span>(<span class="built_in">H_</span>(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">        A.<span class="built_in">push_back</span>(<span class="built_in">H_</span>(<span class="number">2</span>, <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">auto</span> max_p = std::<span class="built_in">max_element</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">double</span> mu = *max_p;</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> sumt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!found &amp;&amp; k &lt; max_iter_)</span><br><span class="line">        &#123;</span><br><span class="line">            k = k + <span class="number">1</span>;</span><br><span class="line">            Eigen::Matrix3d G = H_ + mu * Eigen::Matrix3d::<span class="built_in">Identity</span>();</span><br><span class="line">            Eigen::Vector3d h = G.<span class="built_in">ldlt</span>().<span class="built_in">solve</span>(g_);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (h.<span class="built_in">norm</span>() &lt;= epsilon_2_ * (<span class="built_in">sqrt</span>(*a_ * *a_ + *b_ * *b_ + *c_ * *c_) + epsilon_2_))</span><br><span class="line">                found = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">double</span> na = *a_ + <span class="built_in">h</span>(<span class="number">0</span>);</span><br><span class="line">                <span class="type">double</span> nb = *b_ + <span class="built_in">h</span>(<span class="number">1</span>);</span><br><span class="line">                <span class="type">double</span> nc = *c_ + <span class="built_in">h</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">                <span class="type">double</span> rho = (<span class="built_in">F</span>(*a_, *b_, *c_) - <span class="built_in">F</span>(na, nb, nc)) / <span class="built_in">L0_L</span>(h);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (rho &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    *a_ = na;</span><br><span class="line">                    *b_ = nb;</span><br><span class="line">                    *c_ = nc;</span><br><span class="line">                    <span class="built_in">calcJ_fx</span>();</span><br><span class="line">                    <span class="built_in">calcH_g</span>();</span><br><span class="line"></span><br><span class="line">                    found = (g_.<span class="built_in">lpNorm</span>&lt;Eigen::Infinity&gt;() &lt; epsilon_1_);</span><br><span class="line">                    mu = mu * std::<span class="built_in">max</span>&lt;<span class="type">double</span>&gt;(<span class="number">0.33</span>, <span class="number">1</span> - std::<span class="built_in">pow</span>(<span class="number">2</span> * rho - <span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line">                    nu = <span class="number">2.0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    mu = mu * nu;</span><br><span class="line">                    nu = <span class="number">2</span> * nu;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (is_out_)</span><br><span class="line">            &#123;</span><br><span class="line">                result[<span class="number">0</span>][<span class="number">0</span>] = *a_;</span><br><span class="line">                result[<span class="number">1</span>][<span class="number">0</span>] = *b_;</span><br><span class="line">                result[<span class="number">2</span>][<span class="number">0</span>] = *c_;</span><br><span class="line">                std::cout &lt;&lt; <span class="string">&quot;Iter: &quot;</span> &lt;&lt; std::left &lt;&lt; k &lt;&lt; <span class="string">&quot; Result: &quot;</span></span><br><span class="line">                          &lt;&lt; std::left &lt;&lt; *a_ &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; std::left &lt;&lt; *b_ &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; std::left</span><br><span class="line">                          &lt;&lt; *c_ &lt;&lt; <span class="string">&quot; step: &quot;</span> &lt;&lt; std::left &lt;&lt; h.<span class="built_in">norm</span>() &lt;&lt; <span class="string">&quot; cost: &quot;</span> &lt;&lt; std::left</span><br><span class="line">                          &lt;&lt; <span class="built_in">getCost</span>() &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (found == <span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;\nFinished!\n\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            result[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            result[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            result[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;\nDiverged\n\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Eigen::MatrixXd fx_;</span><br><span class="line">    Eigen::MatrixXd J_; <span class="comment">// 雅克比矩阵</span></span><br><span class="line">    Eigen::Matrix3d H_; <span class="comment">// H矩阵</span></span><br><span class="line">    Eigen::Vector3d g_;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;Eigen::Vector2d&gt; obs_; <span class="comment">// 观测</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 要求的三个参数 */</span></span><br><span class="line">    <span class="type">double</span> *a_, *b_, *c_;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* parameters */</span></span><br><span class="line">    <span class="type">double</span> epsilon_1_, epsilon_2_;</span><br><span class="line">    <span class="type">int</span> max_iter_;</span><br><span class="line">    <span class="type">bool</span> is_out_;</span><br><span class="line">    <span class="type">double</span> **result = <span class="built_in">InitArrPointer</span>(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">&#125;; <span class="comment">// class LevenbergMarquardt</span></span><br></pre></td></tr></table></figure><p>​在以上的求解过程中，根据需要拟合的曲线方程的不同，需要手动计算出曲线方程的雅可比矩阵以及黑塞矩阵，然后再带入方程继续求解，很不方便，但是由于精力有限而且本项目只用到了一种曲线拟合，因此就没有进一步优化，以后有机会的话会尝试着做一个适配型的拟合算法～</p><p>​最关键的一步解决了之后，就是按部就班的按照普通克里金的算法流程具体实现啦～（完整代码上传至<a href="https://github.com/Alluring-beauty/Kriging_project">GitHub</a>）。</p><p>​最后，这个项目最终和公司完成了对接，最后的效果也得到了公司的好评，这几个月里也学到了许多课程之外的知识，同时也锻炼了自己的代码能力，培养了遇到问题先量力而行自己解决，再和老师&#x2F;同学共同探讨的学习习惯，总体来说受益匪浅，对以后的提升也有一定的帮助！</p>]]></content>
      
      
      <categories>
          
          <category> Kriging Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数值分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>夜半序</title>
      <link href="/2023/03/15/%E5%A4%9C%E5%8D%8A%E5%BA%8F/"/>
      <url>/2023/03/15/%E5%A4%9C%E5%8D%8A%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p style="text-indent:2em">知我思之无数，知我念之无穷。<span style="color:red">人隔两地，可共月而同情，虽远千里，愿地分而人和。</span>比肩并坐，促膝同赏。月明群星，星点晴月。霓虹朦胧，天地相削。天跨浩海，日落长江。风过林梢，水击磐石。秋霜附于红叶，红叶舞随秋风。初叶不托朝露，新花不惹蜂虫。危楼与远天齐高，余霞携落日同晖。</p><p style="text-indent:2em">日之所思，爱于夜梦之中，心之所念，匿于蹙眉之间。忧思无时，吾精沛之有时。琐事不数，吾力及之有数。不周之处，冀望侬可相谅；不足之处，孚信吾可相移。执子之手，共步高堂之殿，与子偕老，共度余生之年。</p><p style="text-indent:2em">航，二十有一，所知甚微。<b style="color:red">无志沉舟，梦紫荆之待放；有意摘星，顾皓月之柔光。</b>输画眉于张敞，逊偷香于韩寿。无相如之宝玉，失沈约之瘦腰。他日有意，此序得全；不测风云，无心多言。满目柔情，尽是他人不解；举身无知，疑非不合时宜？</p>]]></content>
      
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于准备考研有感</title>
      <link href="/2022/07/25/%E5%85%B3%E4%BA%8E%E5%87%86%E5%A4%87%E8%80%83%E7%A0%94%E6%9C%89%E6%84%9F/"/>
      <url>/2022/07/25/%E5%85%B3%E4%BA%8E%E5%87%86%E5%A4%87%E8%80%83%E7%A0%94%E6%9C%89%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p style="text-indent:2em">2022年7月24日晚十一点半，准确来说时间是23:38，已经躺在床上准备入睡的我，看到了一条来自清华学姐的QQ信息。</p><p style="text-indent:2em">在我的印象里，位于国内最高学府的学生的优秀是由内而外的，这让我时刻都以一个最谦卑的姿态来面对他们，因为我尊敬每一个优秀的人，每一个努力的人。</p><span id="more"></span><p style="text-indent:2em">在此之前，我问了这位学姐考研清华的难度，她虽然没有从正面回答我，但答案却比正面回答要好。她说：“<b>任何事情都没有绝对，务实笃行，知行致远</b>”。我想，大抵这就是来自清华学子的气质所在吧。</p><p style="text-indent:2em">23：38，她给我发来了一道数学题目，高等数学，在我大一学过之后基本上就没有再复习过，看到题目，二阶线性微分方程，一时间我竟不知道如何去解答。只得硬着头皮说还没有复习、忘记了等等。本想着事情就那么过去了，可她却说这题目是考研最基本的题目，甚是简单，如果这都不能够很好的解答，那么考研清华也就基本无望了......语罢，我再次想起了那句话——任何事情都没有绝对，务实笃行，知行致远。</p><p style="text-indent:2em">仔细想来，上清华绝对不是我一时的想法，长久以来，清华都是我梦寐以求的最高学府，不可撼动。但事实上，到昨天晚上为止，我都没有下定决心背水一战考研清华，因为我害怕落榜，考研清华的人也绝对不是什么等闲之辈，竞争性不言而喻。但是我不想就这么放弃，义务教育已经让我基本丧失了对于学习的热情，唯一能够支持我的就是有朝一日能够站在最高学府的教室内，感受一下学习、进步、奋进的氛围。我想、我要去清华！而且是一定要！虽然学姐的一番话给我带来了压力，但是这压力并不能将我击垮，反而更加催生了我考研清华的决心。<b>务实笃行，知行致远，我将以最谦卑的姿态，走一条最坎坷的道路，我没有必胜的把握，但我有必胜的信念</b>。</p><p style="text-indent:2em">此文为证，本人于2022年7月25日正式向清华大学研究生学士学位发起挑战！</p>]]></content>
      
      
      <categories>
          
          <category> 感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
